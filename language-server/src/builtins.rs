use strum_macros::{AsRefStr, EnumIter, EnumString};
use tower_lsp::lsp_types::CompletionItemKind;

#[derive(EnumIter, EnumString, AsRefStr)]
#[strum(serialize_all = "SCREAMING_SNAKE_CASE")]
pub enum Builtin {
    Any,
    Whitespace,
    Comment,
    Soi,
    Eoi,
    Push,
    Peek,
    PushLiteral,
    Pop,
    Drop,
    PopAll,
    PeekAll,

    AsciiDigit,
    AsciiNonzeroDigit,
    AsciiBinDigit,
    AsciiOctDigit,
    AsciiHexDigit,
    AsciiAlphaLower,
    AsciiAlphaUpper,
    AsciiAlpha,
    AsciiAlphanumeric,
    Newline,
    Letter,
    CasedLetter,
    UppercaseLetter,
    LowercaseLetter,
    TitlecaseLetter,
    ModifierLetter,
    OtherLetter,
    Mark,
    NonSpacingMark,
    SpacingMark,
    EnclosingMark,
    Number,
    DecimalNumber,
    LetterNumber,
    OtherNumber,
    Punctuation,
    ConnectorPunctuation,
    DashPunctuation,
    OpenPunctuation,
    ClosePunctuation,
    InitialPunctuation,
    FinalPunctuation,
    OtherPunctuation,
    Symbol,
    MathSymbol,
    CurrencySymbol,
    ModifierSymbol,
    OtherSymbol,
    Separator,
    SpaceSeparator,
    LineSeparator,
    ParagraphSeparator,
    Control,
    Format,
    PrivateUse,
    Surrogate,
    Unassigned,
    Alphabetic,
    BidiControl,
    BidiMirrored,
    CaseIgnorable,
    Cased,
    ChangesWhenCasefolded,
    ChangesWhenCasemapped,
    ChangesWhenLowercased,
    ChangesWhenTitlecased,
    ChangesWhenUppercased,
    Dash,
    DefaultIgnorableCodePoint,
    Deprecated,
    Diacritic,
    Emoji,
    EmojiComponent,
    EmojiModifier,
    EmojiModifierBase,
    EmojiPresentation,
    ExtendedPictographic,
    Extender,
    GraphemeBase,
    GraphemeExtend,
    GraphemeLink,
    HexDigit,
    Hyphen,
    IdsBinaryOperator,
    IdsTrinaryOperator,
    IdContinue,
    IdStart,
    Ideographic,
    JoinControl,
    LogicalOrderException,
    Lowercase,
    Math,
    NoncharacterCodePoint,
    OtherAlphabetic,
    OtherDefaultIgnorableCodePoint,
    OtherGraphemeExtend,
    OtherIdContinue,
    OtherIdStart,
    OtherLowercase,
    OtherMath,
    OtherUppercase,
    Other,
    PatternSyntax,
    PatternWhiteSpace,
    PrependedConcatenationMark,
    QuotationMark,
    Radical,
    RegionalIndicator,
    SentenceTerminal,
    SoftDotted,
    TerminalPunctuation,
    UnifiedIdeograph,
    Uppercase,
    VariationSelector,
    WhiteSpace,
    XidContinue,
    XidStart,
    Adlam,
    Ahom,
    AnatolianHieroglyphs,
    Arabic,
    Armenian,
    Avestan,
    Balinese,
    Bamum,
    BassaVah,
    Batak,
    Bengali,
    Bhaiksuki,
    Bopomofo,
    Brahmi,
    Braille,
    Buginese,
    Buhid,
    CanadianAboriginal,
    Carian,
    CaucasianAlbanian,
    Chakma,
    Cham,
    Cherokee,
    Chorasmian,
    Common,
    Coptic,
    Cuneiform,
    Cypriot,
    CyproMinoan,
    Cyrillic,
    Deseret,
    Devanagari,
    DivesAkuru,
    Dogra,
    Duployan,
    EgyptianHieroglyphs,
    Elbasan,
    Elymaic,
    Ethiopic,
    Georgian,
    Glagolitic,
    Gothic,
    Grantha,
    Greek,
    Gujarati,
    GunjalaGondi,
    Gurmukhi,
    Han,
    Hangul,
    HanifiRohingya,
    Hanunoo,
    Hatran,
    Hebrew,
    Hiragana,
    ImperialAramaic,
    Inherited,
    InscriptionalPahlavi,
    InscriptionalParthian,
    Javanese,
    Kaithi,
    Kannada,
    Katakana,
    Kawi,
    KayahLi,
    Kharoshthi,
    KhitanSmallScript,
    Khmer,
    Khojki,
    Khudawadi,
    Lao,
    Latin,
    Lepcha,
    Limbu,
    LINEARa,
    LINEARb,
    Lisu,
    Lycian,
    Lydian,
    Mahajani,
    Makasar,
    Malayalam,
    Mandaic,
    Manichaean,
    Marchen,
    MasaramGondi,
    Medefaidrin,
    MeeteiMayek,
    MendeKikakui,
    MeroiticCursive,
    MeroiticHieroglyphs,
    Miao,
    Modi,
    Mongolian,
    Mro,
    Multani,
    Myanmar,
    Nabataean,
    NagMundari,
    Nandinagari,
    NewTaiLue,
    Newa,
    Nko,
    Nushu,
    NyiakengPuachueHmong,
    Ogham,
    OlChiki,
    OldHungarian,
    OldItalic,
    OldNorthArabian,
    OldPermic,
    OldPersian,
    OldSogdian,
    OldSouthArabian,
    OldTurkic,
    OldUyghur,
    Oriya,
    Osage,
    Osmanya,
    PahawhHmong,
    Palmyrene,
    PauCinHau,
    PhagsPa,
    Phoenician,
    PsalterPahlavi,
    Rejang,
    Runic,
    Samaritan,
    Saurashtra,
    Sharada,
    Shavian,
    Siddham,
    Signwriting,
    Sinhala,
    Sogdian,
    SoraSompeng,
    Soyombo,
    Sundanese,
    SylotiNagri,
    Syriac,
    Tagalog,
    Tagbanwa,
    TaiLe,
    TaiTham,
    TaiViet,
    Takri,
    Tamil,
    Tangsa,
    Tangut,
    Telugu,
    Thaana,
    Thai,
    Tibetan,
    Tifinagh,
    Tirhuta,
    Toto,
    Ugaritic,
    Vai,
    Vithkuqi,
    Wancho,
    WarangCiti,
    Yezidi,
    Yi,
    ZanabazarSquare,
}

impl Builtin {
    pub fn description(&self) -> &str {
        match self {
            Self::Any => "Matches any character.",
            Self::Soi => "Matches the start of the input. Does not consume any characters.",
            Self::Eoi => "Matches the end of the input. Does not consume any characters.",
            Self::Whitespace => "Inserted between every expression in non atomic rules.",
            Self::Comment => "Inserted between every expression in non atomic rules.",
            Self::Push => "Match and push the expression.",
            Self::PushLiteral => "Push the literal without matching.",
            Self::Peek => "Match the expression on top of the stack.",
            Self::Pop => "Pop the expression without matching",
            Self::Drop => "Pop the expression without matching.",
            Self::PeekAll => "Peek the entire stack.",
            Self::PopAll => "Pop the entire stack.",

            Self::AsciiDigit => "Matches any ASCII digit (0-9).",
            Self::AsciiNonzeroDigit => "Matches any non-zero ASCII digit (1-9).",
            Self::AsciiBinDigit => "Matches any ASCII binary digit (0-1).",
            Self::AsciiOctDigit => "Matches any ASCII octal digit (0-7).",
            Self::AsciiHexDigit => "Matches any ASCII hexadecimal digit (0-9, a-f, A-F).",

            Self::AsciiAlphaLower => "Matches any ASCII lowercase letter (a-z).",
            Self::AsciiAlphaUpper => "Matches any ASCII uppercase letter (A-Z).",
            Self::AsciiAlpha => "Matches any ASCII letter (a-z, A-Z).",

            Self::AsciiAlphanumeric => "Matches any ASCII alphanumeric character (0-9, a-z, A-Z).",
            Self::Newline => "Matches any newline character (\\n, \\r\\n, \\r).",

            Self::Letter => "Matches any Unicode letter.",
            Self::CasedLetter => "Matches any upper or lower case Unicode letter.",
            Self::UppercaseLetter => "Matches any uppercase Unicode letter.",
            Self::LowercaseLetter => "Matches any lowercase Unicode letter.",
            Self::TitlecaseLetter => "Matches any titlecase Unicode letter.",
            Self::ModifierLetter => "Matches any Unicode modifier letter.",
            Self::OtherLetter => {
                "Matches any Unicode letter that does not fit into any other defined categories."
            }

            Self::Mark => "Matches any Unicode mark.",
            Self::NonSpacingMark => "Matches any Unicode non-spacing mark.",
            Self::SpacingMark => "Matches any Unicode spacing mark.",
            Self::EnclosingMark => "Matches any Unicode enclosing mark.",

            Self::Number => "Matches any Unicode number.",
            Self::DecimalNumber => "Matches any Unicode decimal number.",
            Self::LetterNumber => "Matches any Unicode letter number.",
            Self::OtherNumber => {
                "Matches any Unicode number that does not fit into any other defined categories."
            }

            Self::Punctuation => "Matches any Unicode punctuation.",
            Self::ConnectorPunctuation => "Matches any Unicode connector punctuation.",
            Self::DashPunctuation => "Matches any Unicode dash punctuation.",
            Self::OpenPunctuation => "Matches any Unicode open punctuation.",
            Self::ClosePunctuation => "Matches any Unicode close punctuation.",
            Self::InitialPunctuation => "Matches any Unicode initial punctuation.",
            Self::FinalPunctuation => "Matches any Unicode final punctuation.",
            Self::OtherPunctuation => {
                "Matches any Unicode punctuation that does not fit into any other defined categories."
            }
            Self::Symbol => "Matches any Unicode symbol.",
            Self::MathSymbol => "Matches any Unicode math symbol.",
            Self::CurrencySymbol => "Matches any Unicode currency symbol.",
            Self::ModifierSymbol => "Matches any Unicode modifier symbol.",
            Self::OtherSymbol => {
                "Matches any Unicode symbol that does not fit into any other defined categories."
            }

            Self::Separator => "Matches any Unicode separator.",
            Self::SpaceSeparator => "Matches any Unicode space separator.",
            Self::LineSeparator => "Matches any Unicode line separator.",
            Self::ParagraphSeparator => "Matches any Unicode paragraph separator.",

            Self::Other => {
                "Matches any Unicode character that does not fit into any other defined categories."
            }
            Self::Control => "Matches any Unicode control character.",
            Self::Format => "Matches any Unicode format character.",
            Self::Surrogate => "Matches any Unicode surrogate.",
            Self::PrivateUse => "Matches any Unicode private use character.",
            Self::Unassigned => "Matches any Unicode unassigned character.",

            Self::Alphabetic => "Matches any Unicode alphabetic character.",
            Self::BidiControl => "Matches any Unicode bidirectional control character.",
            Self::BidiMirrored => "Matches any Unicode bidirectional mirrored character.",
            Self::CaseIgnorable => "Matches any Unicode case-ignorable character.",
            Self::Cased => "Matches any Unicode cased character.",
            Self::ChangesWhenCasefolded => {
                "Matches any Unicode character that changes when casefolded."
            }
            Self::ChangesWhenCasemapped => {
                "Matches any Unicode character that changes when casemapped."
            }
            Self::ChangesWhenLowercased => {
                "Matches any Unicode character that changes when lowercased."
            }
            Self::ChangesWhenTitlecased => {
                "Matches any Unicode character that changes when titlecased."
            }
            Self::ChangesWhenUppercased => {
                "Matches any Unicode character that changes when uppercased."
            }
            Self::Dash => "Matches any Unicode dash character.",
            Self::DefaultIgnorableCodePoint => "Matches any Unicode default-ignorable code point.",
            Self::Deprecated => "Matches any Unicode deprecated character.",
            Self::Diacritic => "Matches any Unicode diacritic character.",
            Self::Emoji => "Matches any Unicode emoji character.",
            Self::EmojiComponent => "Matches any Unicode emoji component character.",
            Self::EmojiModifier => "Matches any Unicode emoji modifier character.",
            Self::EmojiModifierBase => "Matches any Unicode emoji modifier base character.",
            Self::EmojiPresentation => "Matches any Unicode emoji presentation character.",
            Self::ExtendedPictographic => "Matches any Unicode extended pictographic character.",
            Self::Extender => "Matches any Unicode extender character.",
            Self::GraphemeBase => "Matches any Unicode grapheme base character.",
            Self::GraphemeExtend => "Matches any Unicode grapheme extend character.",
            Self::GraphemeLink => "Matches any Unicode grapheme link character.",
            Self::HexDigit => "Matches any Unicode hexadecimal digit character.",
            Self::Hyphen => "Matches any Unicode hyphen character.",
            Self::IdsBinaryOperator => "Matches any Unicode IDS binary operator character.",
            Self::IdsTrinaryOperator => "Matches any Unicode IDS trinary operator character.",
            Self::IdContinue => "Matches any Unicode ID continue character.",
            Self::IdStart => "Matches any Unicode ID start character.",
            Self::Ideographic => "Matches any Unicode ideographic character.",
            Self::JoinControl => "Matches any Unicode join control character.",
            Self::LogicalOrderException => "Matches any Unicode logical order exception character.",
            Self::Lowercase => "Matches any Unicode lowercase character.",
            Self::Math => "Matches any Unicode math character.",
            Self::NoncharacterCodePoint => "Matches any Unicode noncharacter code point.",
            Self::OtherAlphabetic => "Matches any Unicode other alphabetic character.",
            Self::OtherDefaultIgnorableCodePoint => {
                "Matches any Unicode other default-ignorable code point."
            }
            Self::OtherGraphemeExtend => "Matches any Unicode other grapheme extend character.",
            Self::OtherIdContinue => "Matches any Unicode other ID continue character.",
            Self::OtherIdStart => "Matches any Unicode other ID start character.",
            Self::OtherLowercase => "Matches any Unicode other lowercase character.",
            Self::OtherMath => "Matches any Unicode other math character.",
            Self::OtherUppercase => "Matches any Unicode other uppercase character.",
            Self::PatternSyntax => "Matches any Unicode pattern syntax character.",
            Self::PatternWhiteSpace => "Matches any Unicode pattern white space character.",
            Self::PrependedConcatenationMark => {
                "Matches any Unicode prepended concatenation mark character."
            }
            Self::QuotationMark => "Matches any Unicode quotation mark character.",
            Self::Radical => "Matches any Unicode radical character.",
            Self::RegionalIndicator => "Matches any Unicode regional indicator character.",
            Self::SentenceTerminal => "Matches any Unicode sentence terminal character.",
            Self::SoftDotted => "Matches any Unicode soft-dotted character.",
            Self::TerminalPunctuation => "Matches any Unicode terminal punctuation character.",
            Self::UnifiedIdeograph => "Matches any Unicode unified ideograph character.",
            Self::Uppercase => "Matches any Unicode uppercase character.",
            Self::VariationSelector => "Matches any Unicode variation selector character.",
            Self::WhiteSpace => "Matches any Unicode white space character.",
            Self::XidContinue => "Matches any Unicode XID continue character.",
            Self::XidStart => "Matches any Unicode XID start character.",

            Self::Adlam => "Matches any Unicode Adlam character.",
            Self::Ahom => "Matches any Unicode Ahom character.",
            Self::AnatolianHieroglyphs => "Matches any Unicode Anatolian Hieroglyphs character.",
            Self::Arabic => "Matches any Unicode Arabic character.",
            Self::Armenian => "Matches any Unicode Armenian character.",
            Self::Avestan => "Matches any Unicode Avestan character.",
            Self::Balinese => "Matches any Unicode Balinese character.",
            Self::Bamum => "Matches any Unicode Bamum character.",
            Self::BassaVah => "Matches any Unicode Bassa Vah character.",
            Self::Batak => "Matches any Unicode Batak character.",
            Self::Bengali => "Matches any Unicode Bengali character.",
            Self::Bhaiksuki => "Matches any Unicode Bhaiksuki character.",
            Self::Bopomofo => "Matches any Unicode Bopomofo character.",
            Self::Brahmi => "Matches any Unicode Brahmi character.",
            Self::Braille => "Matches any Unicode Braille character.",
            Self::Buginese => "Matches any Unicode Buginese character.",
            Self::Buhid => "Matches any Unicode Buhid character.",
            Self::CanadianAboriginal => "Matches any Unicode Canadian Aboriginal character.",
            Self::Carian => "Matches any Unicode Carian character.",
            Self::CaucasianAlbanian => "Matches any Unicode Caucasian Albanian character.",
            Self::Chakma => "Matches any Unicode Chakma character.",
            Self::Cham => "Matches any Unicode Cham character.",
            Self::Cherokee => "Matches any Unicode Cherokee character.",
            Self::Chorasmian => "Matches any Unicode Chorasmian character.",
            Self::Common => "Matches any Unicode Common character.",
            Self::Coptic => "Matches any Unicode Coptic character.",
            Self::Cuneiform => "Matches any Unicode Cuneiform character.",
            Self::Cypriot => "Matches any Unicode Cypriot character.",
            Self::CyproMinoan => "Matches any Unicode Cypro-Minoan character.",
            Self::Cyrillic => "Matches any Unicode Cyrillic character.",
            Self::Deseret => "Matches any Unicode Deseret character.",
            Self::Devanagari => "Matches any Unicode Devanagari character.",
            Self::DivesAkuru => "Matches any Unicode Dives Akuru character.",
            Self::Dogra => "Matches any Unicode Dogra character.",
            Self::Duployan => "Matches any Unicode Duployan character.",
            Self::EgyptianHieroglyphs => "Matches any Unicode Egyptian Hieroglyphs character.",
            Self::Elbasan => "Matches any Unicode Elbasan character.",
            Self::Elymaic => "Matches any Unicode Elymaic character.",
            Self::Ethiopic => "Matches any Unicode Ethiopic character.",
            Self::Georgian => "Matches any Unicode Georgian character.",
            Self::Glagolitic => "Matches any Unicode Glagolitic character.",
            Self::Gothic => "Matches any Unicode Gothic character.",
            Self::Grantha => "Matches any Unicode Grantha character.",
            Self::Greek => "Matches any Unicode Greek character.",
            Self::Gujarati => "Matches any Unicode Gujarati character.",
            Self::GunjalaGondi => "Matches any Unicode Gunjala Gondi character.",
            Self::Gurmukhi => "Matches any Unicode Gurmukhi character.",
            Self::Han => "Matches any Unicode Han character.",
            Self::Hangul => "Matches any Unicode Hangul character.",
            Self::HanifiRohingya => "Matches any Unicode Hanifi Rohingya character.",
            Self::Hanunoo => "Matches any Unicode Hanunoo character.",
            Self::Hatran => "Matches any Unicode Hatran character.",
            Self::Hebrew => "Matches any Unicode Hebrew character.",
            Self::Hiragana => "Matches any Unicode Hiragana character.",
            Self::ImperialAramaic => "Matches any Unicode Imperial Aramaic character.",
            Self::Inherited => "Matches any Unicode Inherited character.",
            Self::InscriptionalPahlavi => "Matches any Unicode Inscriptional Pahlavi character.",
            Self::InscriptionalParthian => "Matches any Unicode Inscriptional Parthian character.",
            Self::Javanese => "Matches any Unicode Javanese character.",
            Self::Kaithi => "Matches any Unicode Kaithi character.",
            Self::Kannada => "Matches any Unicode Kannada character.",
            Self::Katakana => "Matches any Unicode Katakana character.",
            Self::Kawi => "Matches any Unicode Kawi character.",
            Self::KayahLi => "Matches any Unicode Kayah Li character.",
            Self::Kharoshthi => "Matches any Unicode Kharoshthi character.",
            Self::KhitanSmallScript => "Matches any Unicode Khitan Small Script character.",
            Self::Khmer => "Matches any Unicode Khmer character.",
            Self::Khojki => "Matches any Unicode Khojki character.",
            Self::Khudawadi => "Matches any Unicode Khudawadi character.",
            Self::Lao => "Matches any Unicode Lao character.",
            Self::Latin => "Matches any Unicode Latin character.",
            Self::Lepcha => "Matches any Unicode Lepcha character.",
            Self::Limbu => "Matches any Unicode Limbu character.",
            Self::LINEARa => "Matches any Unicode Linear A character.",
            Self::LINEARb => "Matches any Unicode Linear B character.",
            Self::Lisu => "Matches any Unicode Lisu character.",
            Self::Lycian => "Matches any Unicode Lycian character.",
            Self::Lydian => "Matches any Unicode Lydian character.",
            Self::Mahajani => "Matches any Unicode Mahajani character.",
            Self::Makasar => "Matches any Unicode Makasar character.",
            Self::Malayalam => "Matches any Unicode Malayalam character.",
            Self::Mandaic => "Matches any Unicode Mandaic character.",
            Self::Manichaean => "Matches any Unicode Manichaean character.",
            Self::Marchen => "Matches any Unicode Marchen character.",
            Self::MasaramGondi => "Matches any Unicode Masaram Gondi character.",
            Self::Medefaidrin => "Matches any Unicode Medefaidrin character.",
            Self::MeeteiMayek => "Matches any Unicode Meetei Mayek character.",
            Self::MendeKikakui => "Matches any Unicode Mende Kikakui character.",
            Self::MeroiticCursive => "Matches any Unicode Meroitic Cursive character.",
            Self::MeroiticHieroglyphs => "Matches any Unicode Meroitic Hieroglyphs character.",
            Self::Miao => "Matches any Unicode Miao character.",
            Self::Modi => "Matches any Unicode Modi character.",
            Self::Mongolian => "Matches any Unicode Mongolian character.",
            Self::Mro => "Matches any Unicode Mro character.",
            Self::Multani => "Matches any Unicode Multani character.",
            Self::Myanmar => "Matches any Unicode Myanmar character.",
            Self::Nabataean => "Matches any Unicode Nabataean character.",
            Self::NagMundari => "Matches any Unicode Nag Mundari character.",
            Self::Nandinagari => "Matches any Unicode Nandinagari character.",
            Self::NewTaiLue => "Matches any Unicode New Tai Lue character.",
            Self::Newa => "Matches any Unicode Newa character.",
            Self::Nko => "Matches any Unicode Nko character.",
            Self::Nushu => "Matches any Unicode Nushu character.",
            Self::NyiakengPuachueHmong => "Matches any Unicode Nyiakeng Puachue Hmong character.",
            Self::Ogham => "Matches any Unicode Ogham character.",
            Self::OlChiki => "Matches any Unicode Ol Chiki character.",
            Self::OldHungarian => "Matches any Unicode Old Hungarian character.",
            Self::OldItalic => "Matches any Unicode Old Italic character.",
            Self::OldNorthArabian => "Matches any Unicode Old North Arabian character.",
            Self::OldPermic => "Matches any Unicode Old Permic character.",
            Self::OldPersian => "Matches any Unicode Old Persian character.",
            Self::OldSogdian => "Matches any Unicode Old Sogdian character.",
            Self::OldSouthArabian => "Matches any Unicode Old South Arabian character.",
            Self::OldTurkic => "Matches any Unicode Old Turkic character.",
            Self::OldUyghur => "Matches any Unicode Old Uyghur character.",
            Self::Oriya => "Matches any Unicode Oriya character.",
            Self::Osage => "Matches any Unicode Osage character.",
            Self::Osmanya => "Matches any Unicode Osmanya character.",
            Self::PahawhHmong => "Matches any Unicode Pahawh Hmong character.",
            Self::Palmyrene => "Matches any Unicode Palmyrene character.",
            Self::PauCinHau => "Matches any Unicode Pau Cin Hau character.",
            Self::PhagsPa => "Matches any Unicode Phags Pa character.",
            Self::Phoenician => "Matches any Unicode Phoenician character.",
            Self::PsalterPahlavi => "Matches any Unicode Psalter Pahlavi character.",
            Self::Rejang => "Matches any Unicode Rejang character.",
            Self::Runic => "Matches any Unicode Runic character.",
            Self::Samaritan => "Matches any Unicode Samaritan character.",
            Self::Saurashtra => "Matches any Unicode Saurashtra character.",
            Self::Sharada => "Matches any Unicode Sharada character.",
            Self::Shavian => "Matches any Unicode Shavian character.",
            Self::Siddham => "Matches any Unicode Siddham character.",
            Self::Signwriting => "Matches any Unicode SignWriting character.",
            Self::Sinhala => "Matches any Unicode Sinhala character.",
            Self::Sogdian => "Matches any Unicode Sogdian character.",
            Self::SoraSompeng => "Matches any Unicode Sora Sompeng character.",
            Self::Soyombo => "Matches any Unicode Soyombo character.",
            Self::Sundanese => "Matches any Unicode Sundanese character.",
            Self::SylotiNagri => "Matches any Unicode Syloti Nagri character.",
            Self::Syriac => "Matches any Unicode Syriac character.",
            Self::Tagalog => "Matches any Unicode Tagalog character.",
            Self::Tagbanwa => "Matches any Unicode Tagbanwa character.",
            Self::TaiLe => "Matches any Unicode Tai Le character.",
            Self::TaiTham => "Matches any Unicode Tai Tham character.",
            Self::TaiViet => "Matches any Unicode Tai Viet character.",
            Self::Takri => "Matches any Unicode Takri character.",
            Self::Tamil => "Matches any Unicode Tamil character.",
            Self::Tangsa => "Matches any Unicode Tangsa character.",
            Self::Tangut => "Matches any Unicode Tangut character.",
            Self::Telugu => "Matches any Unicode Telugu character.",
            Self::Thaana => "Matches any Unicode Thaana character.",
            Self::Thai => "Matches any Unicode Thai character.",
            Self::Tibetan => "Matches any Unicode Tibetan character.",
            Self::Tifinagh => "Matches any Unicode Tifinagh character.",
            Self::Tirhuta => "Matches any Unicode Tirhuta character.",
            Self::Toto => "Matches any Unicode Toto character.",
            Self::Ugaritic => "Matches any Unicode Ugaritic character.",
            Self::Vai => "Matches any Unicode Vai character.",
            Self::Vithkuqi => "Matches any Unicode Vithkuqi character.",
            Self::Wancho => "Matches any Unicode Wancho character.",
            Self::WarangCiti => "Matches any Unicode Warang Citi character.",
            Self::Yezidi => "Matches any Unicode Yezidi character.",
            Self::Yi => "Matches any Unicode Yi character.",
            Self::ZanabazarSquare => "Matches any Unicode Zanabazar Square character.",
        }
    }

    pub fn kind(&self) -> CompletionItemKind {
        match self {
            Self::Any
            | Self::Whitespace
            | Self::Comment
            | Self::Soi
            | Self::Eoi
            | Self::Push
            | Self::Peek
            | Self::PushLiteral
            | Self::Pop
            | Self::Drop
            | Self::PopAll
            | Self::PeekAll => CompletionItemKind::KEYWORD,
            _ => CompletionItemKind::CONSTANT,
        }
    }
}
